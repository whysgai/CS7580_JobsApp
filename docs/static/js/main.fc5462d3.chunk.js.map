{"version":3,"sources":["redux/storeConstants.js","redux/actionConstants.js","redux/store.js","reportWebVitals.js","data/data.js","redux/actions.js","components/Login.js","components/Navbar.js","components/OnboardingSlides.js","components/SortButton.js","components/JobButtons.js","components/Job.js","components/Jobs.js","view/App.js","index.js"],"names":["LOGIN_STATE","INITIAL_STATE","loginState","user","jobs","LOGIN_SUCCESS","INVALID_LOGIN","LOGOUT_SUCCESS","READ_JOBS","SAVE_JOB","SORT_JOBS","UPDATE_ONBOARDING","createStore","state","action","type","payload","onboarding","value","saved","save","console","log","filter","job","map","id","saves","a","push","length","sorted","sort","job1","job2","deepSorted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LANGUAGES","PYTHON","C","VBA","JAVASCRIPT","PHP","JAVA","ONBOARDINGS","users","username","password","intro","searched","seen","title","company","description","languages","pay","userLogin","rtnUser","login","loginSuccess","loginFail","setOnboarding","training","updateOnboarding","store","getState","readJobs","undefined","index","returnJobs","lang","includes","getJobs","currentUser","savedJobs","jobID","getSavedJobs","toggleSaved","jobId","userId","indexOf","splice","unsaveJob","editingBegun","Login","useState","setUsername","setPassword","useSelector","dispatch","useDispatch","handleLogin","clearForm","handleKeyPress","event","keyCode","preventDefault","className","htmlFor","name","onChange","e","target","onKeyUp","onClick","Navbar","tooltipOpen","toggleTooltip","tooltipRef","useRef","useEffect","tooltip","current","bsTooltip","Tooltip","getInstance","hide","show","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","href","aria-disabled","ref","data-bs-placement","data-bs-trigger","onPointerEnter","onFocus","onPointerOut","onBlur","OnboardingSlides","slideCount","setSlideCount","slidesDone","setDone","advance","adv","data-bs-ride","data-bs-slide-to","aria-current","data-bs-interval","src","process","alt","data-bs-slide","aria-hidden","SortButton","sortJobs","icon","faSortAmountDown","JobButtons","selectedLanguages","setSelectedLanguages","updateSelectedJobs","language","langs","sl","role","Object","keys","autoComplete","boxes","document","getElementsByClassName","checked","all","Job","props","saveJob","val","aria-labelledby","data-bs-parent","scale","i","payscale","faCheckSquare","faSquare","Jobs","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc5462d3.chunk.js","sourcesContent":["export const LOGIN_STATE = {\r\n    LOGGED_IN: \"logged in\",\r\n    LOGGED_OUT: \"logged out\",\r\n    INVALID_LOGIN: \"invalid login\",\r\n    NETWORK_ERROR: \"network error\"\r\n}\r\n\r\nexport const INITIAL_STATE = {\r\n    loginState: LOGIN_STATE.LOGGED_OUT,\r\n    user: -1,\r\n    jobs: []\r\n}","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const INVALID_LOGIN = \"INVALID_LOGIN\";\r\nexport const LOGIN_NETWORK_ERROR = \"LOGIN_NETWORK_ERROR\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const READ_JOBS = \"READ_JOBS\";\r\nexport const SAVE_JOB = \"SAVE_JOB\";\r\nexport const READ_SAVED_JOBS = \"READ_SAVED_JOBS\";\r\nexport const SORT_JOBS = \"SORT_JOBS\";\r\nexport const UPDATE_ONBOARDING = \"UPDATE_ONBOARDING\";","import { createStore } from \"redux\";\r\nimport _ from \"lodash\";\r\nimport {INITIAL_STATE, LOGIN_STATE} from \"./storeConstants\";\r\nimport { LOGIN_SUCCESS, INVALID_LOGIN, LOGOUT_SUCCESS,\r\n    READ_JOBS, SAVE_JOB, SORT_JOBS, UPDATE_ONBOARDING } from './actionConstants';\r\n\r\n    const rootReducer = (state = INITIAL_STATE, action) => {\r\n        switch (action.type) {\r\n            case LOGIN_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    loginState: LOGIN_STATE.LOGGED_IN,\r\n                    user: action.payload.user\r\n                };\r\n            case INVALID_LOGIN:\r\n                return {...state, loginState: LOGIN_STATE.INVALID_LOGIN};\r\n            case LOGOUT_SUCCESS:\r\n                return INITIAL_STATE;\r\n            case UPDATE_ONBOARDING:\r\n                return {\r\n                    ...state,\r\n                    user: {\r\n                        ...state.user,\r\n                        onboarding: {\r\n                            ...state.user.onboarding,\r\n                            [action.payload.onboarding]: action.payload.value\r\n                        }                        \r\n                    }\r\n                }\r\n            case READ_JOBS:\r\n                return {\r\n                    ...state,\r\n                    jobs: action.payload.jobs\r\n                }  \r\n            case SAVE_JOB:\r\n                for (let save of state.user.saved) {console.log(save)};\r\n                if (action.payload.saved) {                    \r\n                    return {\r\n                        ...state,\r\n                        user: {\r\n                            ...state.user,\r\n                            saved: state.user.saved.filter(job => job !== action.payload.job)                \r\n                        },\r\n                        jobs : state.jobs.map(job => {\r\n                            if (action.payload.job === job.id) {\r\n                                job.saves -= 1;\r\n                            }\r\n                            return job;\r\n                    })\r\n                    }\r\n                } else {\r\n                    let a = state.user.saved;\r\n                    a.push(action.payload.job);\r\n                    return {\r\n                        ...state,\r\n                        user: {\r\n                            ...state.user,\r\n                            saved : a\r\n                        },\r\n                        jobs : state.jobs.map(job => {\r\n                                if (action.payload.job === job.id) {\r\n                                    job.saves += 1;\r\n                                }\r\n                                return job;\r\n                        })\r\n                    };\r\n                }\r\n            case SORT_JOBS:\r\n                if (state.jobs.length > 0) {\r\n                    let sorted = state.jobs.sort(\r\n                        (job1, job2) => job2.saves - job1.saves\r\n                    );\r\n                    let deepSorted = [];\r\n                    for (let job of sorted) {\r\n                        deepSorted.push(job);\r\n                    };\r\n                    return {\r\n                        ...state,\r\n                        jobs: deepSorted\r\n                    };\r\n                }                     \r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    export default createStore(rootReducer);","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const LANGUAGES = {\r\n    // ALL: \"All\",\r\n    PYTHON: \"Python\",\r\n    C: \"C\",\r\n    VBA: \"VBA\",\r\n    JAVASCRIPT: \"JavaScript\",\r\n    PHP: \"PHP\",\r\n    JAVA: \"Java\" \r\n};\r\n\r\nexport const ONBOARDINGS = {\r\n    INTRO: \"intro\",\r\n    SEARCHED: \"searched\",\r\n    SAVED: \"saved\",\r\n    SEEN: \"seen\",\r\n    SORTED: \"sorted\"\r\n}\r\n\r\nexport const users = [\r\n    {\r\n        username: \"newuser\",\r\n        password: \"1234\",\r\n        saved: [],\r\n        onboarding: {\r\n            intro: false,\r\n            searched: false,\r\n            saved: false,\r\n            seen: false,\r\n            sorted: false\r\n        }\r\n    },\r\n    {\r\n        username: \"adeptuser\",\r\n        password: \"1234\",\r\n        saved: [2],\r\n        onboarding: {\r\n            intro: true,\r\n            searched: true,\r\n            saved: true,\r\n            seen: false,\r\n            sorted: false\r\n        }\r\n    },\r\n    {\r\n        username: \"expertuser\",\r\n        password: \"1234\",\r\n        saved: [0, 2, 3],\r\n        onboarding: {\r\n            intro: true,\r\n            searched: true,\r\n            saved: true,\r\n            seen: true,\r\n            sorted: true\r\n        }\r\n    }   \r\n];\r\n\r\nexport const jobs = [\r\n    {\r\n        title : \"Lorem\",\r\n        company: \"Mann Co.\",\r\n        description : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sagittis arcu id nulla vulputate, rhoncus varius magna ultricies. Aliquam laoreet libero in elit tincidunt ullamcorper. Duis in finibus lorem. Etiam quis posuere lectus, vel accumsan nunc. Suspendisse facilisis elit velit, sit amet dapibus lectus mattis in. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer venenatis a nulla vitae dapibus. Duis euismod quam interdum dui tempor malesuada.\",\r\n        languages: [LANGUAGES.PYTHON],\r\n        pay: 2,\r\n        saves: 1,\r\n    },\r\n    {\r\n        title : \"Aliquam\",            \r\n        company : \"Aperture Science\",\r\n        description : \"Aliquam efficitur tellus erat, at mollis eros facilisis in. In scelerisque tortor purus, vel porttitor dui vestibulum sit amet. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Curabitur mattis elementum sapien, eget interdum nisl consequat id. Aliquam ac leo et ex aliquam interdum eget scelerisque enim. Aliquam erat volutpat. Nulla placerat posuere arcu non semper.\",\r\n        languages : [LANGUAGES.C],\r\n        pay : 4,\r\n        saves : 0\r\n\r\n    },\r\n    {\r\n        title : \"Nulla\",            \r\n        company : \"Tesladyne Industries\",\r\n        description : \"Nulla ultrices sem eu lacus fringilla scelerisque. Aenean vitae nibh congue magna interdum suscipit at ac libero. Aliquam at sapien sit amet urna fringilla placerat. In malesuada leo in ultricies dignissim. Nulla vestibulum suscipit turpis nec fringilla. Nullam id volutpat libero. Ut vehicula bibendum blandit. Sed porttitor eget ipsum pharetra imperdiet. Fusce feugiat at lacus et accumsan.\",\r\n        languages : [LANGUAGES.JAVASCRIPT],\r\n        pay : 1,\r\n        saves : 2\r\n    },\r\n    {\r\n        title : \"Aenean\",            \r\n        company : \"Wayne Enterprises\",\r\n        description : \"Aenean fermentum dui dolor, a porttitor turpis dictum auctor. Praesent non ipsum urna. Phasellus imperdiet, lectus sollicitudin hendrerit finibus, urna mauris suscipit lectus, eu porttitor orci ante eu leo. Quisque ac neque lorem. Quisque nec sapien nec dui pulvinar viverra. Nulla facilisi. Quisque eu elit id nisl congue semper eget non odio.\",\r\n        languages : [LANGUAGES.JAVASCRIPT, LANGUAGES.PYTHON],\r\n        pay : 5,\r\n        saves : 1\r\n    },\r\n    {\r\n        title : \"Maecenas\",            \r\n        company : \"Black Mesa\",\r\n        description : \"Maecenas in vehicula sem. Cras auctor commodo convallis. Cras at eros a eros sagittis porttitor id ac augue. Suspendisse aliquam ac ante vitae commodo. Nulla vestibulum ut risus sed lobortis. Sed quis mauris eget velit maximus dictum sed non augue. Aliquam orci sem, malesuada sit amet orci ut, vehicula bibendum enim. Proin in semper dolor. Fusce eget diam ac justo faucibus sodales vulputate quis tellus. Fusce dictum pulvinar enim vitae elementum. Curabitur quis commodo mauris. Etiam non ullamcorper magna, ac posuere metus. In nec justo ac augue ornare volutpat id a diam.\",\r\n        languages : [LANGUAGES.PHP, LANGUAGES.PYTHON],\r\n        pay : 3,\r\n        saves : 0\r\n    },\r\n    {\r\n        title : \"Nunc finibus\",            \r\n        company : \"Anaheim Electronics\",\r\n        description : \"Nunc finibus lobortis est quis rhoncus. Quisque blandit arcu a eros aliquam, ac convallis lectus laoreet. Maecenas facilisis dui ac sapien condimentum consectetur. Vivamus ornare, dolor in suscipit sagittis, mauris velit rhoncus lorem, a euismod justo elit quis purus. Curabitur et arcu ante. Sed interdum sodales pharetra. Nullam interdum justo nec velit faucibus tincidunt.\",\r\n        languages : [LANGUAGES.JAVA, LANGUAGES.C],\r\n        pay : 2,\r\n        saves : 0\r\n    }\r\n\r\n];\r\n\r\nexport const login = (username, password) => {\r\n    for (let user in users) {\r\n        console.log(\"Matching \" + username + \" with \" + users[user].username);\r\n        if (username === users[user].username && password === users[user].password) {\r\n            let rtnUser = {\r\n                id: user,\r\n                username: users[user].username,\r\n                saved: users[user].saved,\r\n                onboarding: users[user].onboarding\r\n            }\r\n            console.log(\"Username and password combo found, returning\", rtnUser);\r\n            return rtnUser;\r\n        }\r\n    };\r\n    console.log(\"Return at end\")\r\n    return {};\r\n};\r\n\r\nexport const getJobs = languages => {    \r\n    if (languages.length === 0 || languages === undefined || languages === null) {\r\n        console.log(\"Fetching all jobs\");\r\n        return jobs.map((job, index) => {\r\n            job.id = index;\r\n            return job;    \r\n        });\r\n    } else {\r\n        let returnJobs = [];\r\n        for (let job of jobs) {\r\n            for (let lang of languages) {\r\n                if (job.languages.includes(lang) && !returnJobs.includes(job)) {\r\n                    returnJobs.push(job);\r\n                }\r\n            }\r\n        }\r\n        console.log(\"Returning jobs\", returnJobs);\r\n        return returnJobs;\r\n    }    \r\n};\r\n\r\nexport const saveJob = (user, job) => {\r\n    users[user].saved.push(job);\r\n    jobs[job].saves++;\r\n};\r\n\r\nexport const unsaveJob = (user, job) => {\r\n    let index  = users[user].saved.indexOf(job);\r\n    if (index > -1) {\r\n        users[user].saved.splice(index, 1);\r\n        jobs[job].saves--;\r\n    }\r\n};\r\n\r\nexport const getSavedJobs = currentUser => {\r\n    let savedJobs = [];\r\n    for (let jobID of users[currentUser].saved) {\r\n        savedJobs.push(jobs[jobID]);\r\n    }\r\n    return savedJobs;\r\n};\r\n\r\nexport const updateOnboarding = (user, training, value) => {\r\n    switch (training) {\r\n        case ONBOARDINGS.INTRO:\r\n            users[user].onboarding.intro = value;\r\n            break;\r\n        case ONBOARDINGS.SEARCHED:\r\n            users[user].onboarding.searched = value;\r\n            break;\r\n        case ONBOARDINGS.SAVED:\r\n            users[user].onboarding.saved = value;\r\n            break;\r\n        case ONBOARDINGS.SEEN:\r\n            users[user].onboarding.seen = value;\r\n            break;\r\n        case ONBOARDINGS.SORTED:\r\n            users[user].onboarding.sorted = value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n};","import { LOGIN_SUCCESS, INVALID_LOGIN, LOGOUT_SUCCESS,\r\n    READ_JOBS, SAVE_JOB, SORT_JOBS, UPDATE_ONBOARDING } from './actionConstants';\r\nimport { login, getJobs, saveJob, unsaveJob, getSavedJobs, updateOnboarding } from \"../data/data\";\r\nimport store from \"./store\"\r\n\r\nexport const userLogin = (username, password) => {\r\n    let user = login(username, password);\r\n    console.log(\"Action login\", user);\r\n    if (user.id)\r\n        return loginSuccess(user);\r\n    else return loginFail();\r\n};\r\n\r\nexport const loginSuccess = user => ({\r\n    type: LOGIN_SUCCESS,\r\n    payload: {\r\n        user\r\n    }\r\n});\r\n\r\nexport const loginFail = () => ({\r\n    type: INVALID_LOGIN\r\n});\r\n\r\nexport const logout = () => ({\r\n    type: LOGOUT_SUCCESS\r\n});\r\n\r\nexport const setOnboarding = (onboarding, value) => {\r\n    const id = store.getState().user.id;\r\n    updateOnboarding(id, onboarding, value);\r\n    return {\r\n        type: UPDATE_ONBOARDING,\r\n        payload: {\r\n            onboarding,\r\n            value\r\n        }        \r\n    }\r\n};\r\n\r\nexport const readJobs = (languages) => {\r\n    let jobs = [];\r\n    if (languages !== null) {\r\n        jobs = getJobs(languages);        \r\n    } else {\r\n        const userId = store.getState().user.id;\r\n        jobs = getSavedJobs(userId);\r\n    }\r\n    return {\r\n        type: READ_JOBS,\r\n        payload: {\r\n            jobs\r\n        }\r\n    }\r\n};\r\n\r\nexport const toggleSaved = (saved, jobId) => {\r\n    const userId = store.getState().user.id;\r\n    if (saved) {\r\n        unsaveJob(userId, jobId);\r\n    } else {\r\n        saveJob(userId, jobId);\r\n    }\r\n    return {\r\n        type: SAVE_JOB,\r\n        payload: {\r\n            saved,\r\n            job : jobId\r\n        }\r\n    }   \r\n    \r\n};\r\n\r\nexport const sortBySaves = () => {\r\n    return {\r\n        type: SORT_JOBS\r\n    }\r\n};","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userLogin } from \"../redux/actions\";\r\nimport { LOGIN_STATE } from \"../redux/storeConstants\";\r\n\r\nlet editingBegun = false;\r\n\r\n// Predominantly borrowed from demo to-do list code (Northeastern University CS7580 Lab 8)\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const loginState = useSelector(state => state.loginState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleLogin = () => {\r\n        dispatch(userLogin(username, password));\r\n        clearForm();\r\n    }\r\n\r\n    const handleKeyPress = event => {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault();\r\n            handleLogin();\r\n        }\r\n    }\r\n\r\n    const clearForm = () => {\r\n        editingBegun = false;\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                !editingBegun && loginState === LOGIN_STATE.INVALID_LOGIN &&\r\n                    <div className=\"alert alert-danger\">Invalid username / password! Please try again.</div>\r\n            }\r\n            {\r\n                !editingBegun && loginState === LOGIN_STATE.NETWORK_ERROR &&\r\n                    <div className=\"alert alert-danger\">Unable to connect to the server. Please check your internet connection.</div>\r\n            }\r\n            <div className=\"row my-4 add-form\">\r\n                <div className=\"col-12 col-sm-2\">\r\n                    <label htmlFor=\"username\" className=\"form-label\">Username:</label>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <input type=\"text\" id=\"username\" name=\"username\" \r\n                        className=\"form-control\"\r\n                        value={username} onChange={e => {\r\n                            editingBegun = true;\r\n                            setUsername(e.target.value);\r\n                            }}\r\n                            onKeyUp={e => handleKeyPress(e)}\r\n                            />\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-4 add-form\">\r\n                <div className=\"col-12 col-sm-2\">\r\n                    <label htmlFor=\"password\" className=\"form-label\">Password:</label>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <input type=\"password\" id=\"password\" name=\"password\"\r\n                        className=\"form-control\"\r\n                        value={password} onChange={e => {\r\n                                editingBegun = true;\r\n                                setPassword(e.target.value);\r\n                        }}\r\n                        onKeyUp={e => handleKeyPress(e)}\r\n                            />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <button className=\"btn btn-secondary float-end login-button\" onClick={handleLogin}>\r\n                        Log in\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Tooltip } from \"bootstrap\";\r\nimport { ONBOARDINGS } from \"../data/data\";\r\nimport { readJobs, logout, setOnboarding } from \"../redux/actions\";\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    const user = useSelector(state => state.user); \r\n    const dispatch = useDispatch();\r\n    const [tooltipOpen, toggleTooltip] = useState(false);\r\n    const tooltipRef = useRef();\r\n\r\n    // Tooltip useEffect\r\n    useEffect(() => {\r\n        let tooltip = tooltipRef.current;\r\n        let bsTooltip = Tooltip.getInstance(tooltip)\r\n        if (!bsTooltip) {\r\n            bsTooltip = new Tooltip(tooltip);\r\n        }\r\n        else {\r\n            if (user.onboarding.seen) {\r\n                bsTooltip.hide();\r\n            } else {\r\n                tooltipOpen ? bsTooltip.show() : bsTooltip.hide();\r\n            }\r\n        }\r\n    });\r\n\r\n    const viewSaved = () => {\r\n        dispatch(readJobs(null));\r\n        if (!user.onboarding.seen) {\r\n            dispatch(setOnboarding(ONBOARDINGS.SEEN));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"container container-fluid nav-container\">\r\n                <span className=\"navbar-brand logo\" >JOBZ</span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav \">\r\n                        <span className=\"navbar-text\">{user.username}</span>\r\n                        <a className={`nav-link ${user.saved.length < 1 ? \"disabled\" : \"\"}`} href=\"#\"\r\n                            onClick={() => viewSaved()}\r\n                            aria-disabled={user.saved.length < 1}\r\n                            ref={tooltipRef}\r\n                            data-bs-toggle=\"tooltip\"\r\n                            data-bs-placement=\"bottom\"\r\n                            data-bs-trigger=\"manual\"\r\n                            title=\"View your saved jobs here.\"\r\n                            onPointerEnter={() => toggleTooltip(true)}\r\n                            onFocus={() => toggleTooltip(true)}\r\n                            onPointerOut={() => toggleTooltip(false)}\r\n                            onBlur={() => toggleTooltip(false)}\r\n                        >\r\n                            My Saved Jobs:&nbsp;\r\n                            {user.saved.length}\r\n                        </a>\r\n                        {\r\n                            user.onboarding.intro ?\r\n                                <a className=\"nav-link\" href=\"#\" onClick={() => dispatch(setOnboarding(ONBOARDINGS.INTRO, false))}>\r\n                                    Tutorial\r\n                                </a>\r\n                                :\r\n                                <></>\r\n                        }\r\n                        <a className=\"nav-link\" href=\"#\" onClick={() => dispatch(logout())}>\r\n                            Logout\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ONBOARDINGS } from \"../data/data\";\r\nimport { setOnboarding } from \"../redux/actions\";\r\n\r\nconst OnboardingSlides = () => {\r\n    const [slideCount, setSlideCount] = useState(0);\r\n    const [slidesDone, setDone] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!slidesDone && slideCount >= 2) {\r\n            setDone(true);\r\n        }\r\n    }, [slideCount]);\r\n\r\n    const advance = (adv) => {\r\n        if (adv) {\r\n            setSlideCount(slideCount + 1);\r\n        } else {\r\n            setSlideCount(slideCount - 1);\r\n        }     \r\n    }\r\n\r\n    return (\r\n        <div className=\"container container-height\">\r\n            <div className=\"card card-body slides\">\r\n                <div id=\"carouselExampleDark\" className=\"carousel carousel-light\" data-bs-ride=\"true\">\r\n                    <div className=\"carousel-indicators\">\r\n                        <button type=\"button\" data-bs-target=\"#carouselExampleDark\" data-bs-slide-to=\"0\" className=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\r\n                        <button type=\"button\" data-bs-target=\"#carouselExampleDark\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\r\n                        <button type=\"button\" data-bs-target=\"#carouselExampleDark\" data-bs-slide-to=\"2\" aria-label=\"Slide 3\"></button>\r\n                    </div>\r\n                    <div className=\"carousel-inner\">\r\n                        <div className=\"carousel-item\" data-bs-interval=\"false\">\r\n                            <div className=\"slide\">\r\n                                <img src={process.env.PUBLIC_URL + \"/media/SaveForLater_iPad.png\"} className=\"slide-img\" alt=\"Save interesting postings for later review.\"/>\r\n                                {/* <div className=\"carousel-caption d-none d-md-block\"> */}\r\n                                <div className=\"carousel-caption text-dark\">\r\n                                    <h5>Save for later</h5>\r\n                                    <p>Save interesting postings for later review.</p>\r\n                                </div>\r\n                             </div>                            \r\n                        </div>\r\n                        <div className=\"carousel-item\" data-bs-interval=\"false\">\r\n                            <div className=\"slide\">\r\n                                <img src={process.env.PUBLIC_URL + \"/media/FilterLanguage_iPad.png\"} className=\"slide-img\" alt=\"Postings are tagged with relevant promgramming languages: filter by one or several.\"/>\r\n                                <div className=\"carousel-caption text-dark\">\r\n                                    <h5>Look for langugage</h5>\r\n                                    <p>Postings are tagged with relevant promgramming languages: filter by one or several.</p>\r\n                                </div>\r\n                             </div>                            \r\n                        </div>\r\n                        <div className=\"carousel-item active\" data-bs-interval=\"false\">\r\n                            <div className=\"slide\">\r\n                                <img src={process.env.PUBLIC_URL + \"/media/ViewList_iPad.png\"} className=\"slide-img\" alt=\"View job postings from companies around the internet.\"/>\r\n                                <div className=\"carousel-caption text-dark\">\r\n                                    <h5>Welcome to JOBZ</h5>\r\n                                    <p>View job postings from companies around the internet.</p>\r\n                                </div>\r\n                            </div>                            \r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        slideCount > 0 ?\r\n                            <button className=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleDark\"  data-bs-slide=\"prev\" onClick={() => advance(false)}>\r\n                                <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                                <span className=\"visually-hidden\">Previous</span>\r\n                            </button>\r\n                            :\r\n                            <></>\r\n                    }\r\n                    {\r\n                        slideCount < 2 ?\r\n                            <button className=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleDark\"  data-bs-slide=\"next\" onClick={() => advance(true)}>\r\n                                <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                                <span className=\"visually-hidden\">Next</span>\r\n                            </button>\r\n                            :\r\n                            <></>\r\n                    }\r\n                </div>\r\n                <button className=\"btn btn-secondary skip-done\" onClick={() => dispatch(setOnboarding(ONBOARDINGS.INTRO, true))}>{!slidesDone ? \"Skip\" : \"Done\"}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default OnboardingSlides;","import { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Tooltip } from \"bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortAmountDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { ONBOARDINGS } from \"../data/data\";\r\nimport { sortBySaves, setOnboarding } from \"../redux/actions\";\r\n\r\nconst SortButton = () => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const [tooltipOpen, toggleTooltip] = useState(false);\r\n    const tooltipRef = useRef();\r\n\r\n    // Tooltip useEffect\r\n    useEffect(() => {\r\n        let tooltip = tooltipRef.current;\r\n        let bsTooltip = Tooltip.getInstance(tooltip)\r\n        if (!bsTooltip) {\r\n            bsTooltip = new Tooltip(tooltip);\r\n        }\r\n        else {\r\n            if (user.onboarding.sorted) {\r\n                bsTooltip.hide();\r\n            } else {\r\n                tooltipOpen ? bsTooltip.show() : bsTooltip.hide();\r\n            }\r\n        }\r\n    });\r\n\r\n    // Sort the jobs and update user variable for tooltip\r\n    const sortJobs = () => {\r\n        dispatch(sortBySaves());\r\n        if (!user.onboarding.sorted) {\r\n            dispatch(setOnboarding(ONBOARDINGS.SORTED));\r\n        }        \r\n    };\r\n\r\n    return (\r\n        <button className=\"btn btn-primary sort-button\" onClick={() => sortJobs()}\r\n            ref={tooltipRef}\r\n            data-bs-toggle=\"tooltip\"\r\n            data-bs-placement=\"top\"\r\n            data-bs-trigger=\"manual\"\r\n            title=\"Sort viewed tasks by how frequently they are saved.\"\r\n            onPointerEnter={() => toggleTooltip(true)}\r\n            onFocus={() => toggleTooltip(true)}\r\n            onPointerOut={() => toggleTooltip(false)}\r\n            onBlur={() => toggleTooltip(false)}\r\n        >\r\n            Sort By Popularity&nbsp;\r\n            <FontAwesomeIcon icon={faSortAmountDown} aria-hidden=\"true\" />\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default SortButton;","import { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { LANGUAGES, ONBOARDINGS } from \"../data/data\";\r\nimport { readJobs, setOnboarding } from \"../redux/actions\";\r\nimport SortButton from \"./SortButton\";\r\n\r\nconst JobButtons = () => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const [selectedLanguages, setSelectedLanguages] = useState([]);    \r\n\r\n    // Fetch jobs when the selectedLanguages are updated\r\n    useEffect(() => {\r\n        console.log(\"New selected languages\", selectedLanguages);\r\n        dispatch(readJobs(selectedLanguages));\r\n    }, [selectedLanguages]);\r\n\r\n    // Add selected jobs to new array (deep copy) before fetching from server\r\n    const updateSelectedJobs = (language) => {\r\n        if (language === \"All\") {\r\n            setSelectedLanguages([]);\r\n        } else {\r\n            let langs = [];\r\n            if (selectedLanguages.includes(language)) {\r\n                langs = selectedLanguages.filter(lang => lang !== language);\r\n            } else {\r\n                for (let sl of selectedLanguages) {\r\n                    langs.push(sl);\r\n                }\r\n                langs.push(language);\r\n            }\r\n            setSelectedLanguages(langs);\r\n        }\r\n        if (!user.onboarding.searched) {\r\n            dispatch(setOnboarding(ONBOARDINGS.SEARCHED));\r\n        }\r\n    };\r\n\r\n    const all = () => {\r\n        updateSelectedJobs(\"All\");\r\n        let boxes = document.getElementsByClassName(\"btn-check\");\r\n        for (let box of boxes) {\r\n           box.checked = false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"job-buttons\">\r\n            <div className=\"btn-group filter-buttons\" role=\"group\" aria-label=\"Basic checkbox toggle button group\"> \r\n                {\r\n                    Object.keys(LANGUAGES).map((lang, index) =>\r\n                        <>    \r\n                            <input type=\"checkbox\" name=\"languageSelection\" \r\n                                className=\"btn-check\" id={`languageCheck${index}`} \r\n                                onChange={() => updateSelectedJobs(LANGUAGES[lang])}\r\n                            />                          \r\n                            <label key={index} className=\"btn btn-outline-primary\" autoComplete=\"off\"\r\n                                htmlFor={`languageCheck${index}`}\r\n                            >\r\n                                {LANGUAGES[lang]}       \r\n                            </label>\r\n                              \r\n                        </>\r\n                    )\r\n                }\r\n                <button className=\"btn btn-outline-primary\" onClick={() => all()}>\r\n                    All\r\n                    {/* <input type=\"checkbox\" name=\"languageSelection\" \r\n                        className=\"btn-check\" id=\"languageRadioAll\" \r\n                        onChange={() => updateSelectedJobs(\"All\")}\r\n                    />\r\n                    <label className=\"btn btn-outline-primary\" autoComplete=\"off\"\r\n                        htmlFor=\"languageRadioAll\"\r\n                    >\r\n                        All                        \r\n                    </label> */}\r\n                </button>\r\n            </div>\r\n            <span>\r\n                <SortButton />\r\n            </span>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JobButtons;","import { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Tooltip } from \"bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSquare } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { ONBOARDINGS } from \"../data/data\";\r\nimport { toggleSaved, setOnboarding } from \"../redux/actions\";\r\n\r\nconst Job = (props) => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const [tooltipOpen, toggleTooltip] = useState(false);\r\n    const tooltipRef = useRef();\r\n\r\n    // Tooltip useEffect\r\n    useEffect(() => {\r\n        let tooltip = tooltipRef.current;\r\n        let bsTooltip = Tooltip.getInstance(tooltip)\r\n        if (!bsTooltip) {\r\n            bsTooltip = new Tooltip(tooltip);\r\n        }\r\n        else {\r\n            if (user.onboarding.saved) {\r\n                bsTooltip.hide();\r\n            } else {\r\n                tooltipOpen ? bsTooltip.show() : bsTooltip.hide();\r\n            }\r\n        }\r\n    });\r\n\r\n    const payscale = (pay) => {\r\n        let scale = \"\";\r\n        for (let i = 0; i < pay; i++) {\r\n            scale += \"$\";\r\n        }\r\n        return scale;\r\n    };\r\n\r\n    const saveJob = (val, id) => {\r\n        dispatch(toggleSaved(val, id));\r\n        if (!user.onboarding.saved) {\r\n            dispatch(setOnboarding(ONBOARDINGS.SAVED, true));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"accordion-item\">\r\n            <div className=\"accordian-header\" id={`jobHeading${props.job.id}`}>\r\n                <button className=\"accordion-button job-header collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#jobCollapse${props.job.id}`} aria-expanded=\"false\" aria-controls={`jobCollapse${props.job.id}`}>\r\n                    <h3>Position: {props.job.title}</h3>\r\n                </button>\r\n            </div>\r\n            <div id={`jobCollapse${props.job.id}`} className=\"accordion-collapse collapse\" aria-labelledby={`jobHeading${props.job.id}`} data-bs-parent=\"#jobsAccordion\">\r\n                <div className=\"accordion-body\">\r\n                    <h4>Company: {props.job.company}</h4>\r\n                    <p>{props.job.description}</p>\r\n                    <div className=\"job-details\">\r\n                        <h5>Languages: {props.job.languages.map((language, index) => index > 0 ? \"; \" + language : language)}</h5> \r\n                        <h5>Salary:&nbsp; \r\n                            {\r\n                                payscale(props.job.pay)\r\n                            }                    \r\n                        </h5>\r\n                        <span className=\"save-button\"\r\n                            ref={tooltipRef}\r\n                            data-bs-toggle=\"tooltip\"\r\n                            data-bs-placement=\"top\"\r\n                            data-bs-trigger=\"manual\"\r\n                            title=\"Save job postings to view later.\"\r\n                            onPointerEnter={() => toggleTooltip(true)}\r\n                            onFocus={() => toggleTooltip(true)}\r\n                            onPointerOut={() => toggleTooltip(false)}\r\n                            onBlur={() => toggleTooltip(false)}\r\n                        >\r\n                            {\r\n                                user.saved.includes(props.job.id) ?\r\n                                    <button\r\n                                        className=\"btn btn-secondary save-button\"\r\n                                        onClick={() => saveJob(true, props.job.id)}\r\n                                    >\r\n                                        Saved&nbsp;\r\n                                        <FontAwesomeIcon icon={faCheckSquare} aria-hidden=\"true\" />\r\n                                    </button>\r\n                                    :\r\n                                    <button\r\n                                        className=\"btn btn-outline-secondary save-button\" \r\n                                        onClick={() => saveJob(false, props.job.id)}\r\n                                    >\r\n                                        Save&nbsp;\r\n                                        <FontAwesomeIcon icon={faSquare} aria-hidden=\"true\" />\r\n                                    </button>\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>                   \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Job;","import { useSelector } from \"react-redux\";\r\nimport JobButtons from \"../components/JobButtons\";\r\nimport Job from \"../components/Job\";\r\n\r\nconst Jobs = () => {\r\n\r\n    const jobs = useSelector(state => state.jobs);   \r\n    const user = useSelector(state => state.user); \r\n\r\n    return (\r\n        <div className=\"container container-height\">\r\n            {console.log(\"User:\", user)}\r\n            {console.log(\"Jobs:\", jobs)}\r\n            <div className=\"card bg-light jobs\">\r\n                <div className=\"card-header buttons\">\r\n                    <JobButtons />\r\n                </div>\r\n                <div className=\"card-body jobs-list\">\r\n                    <div className=\"accordion accordion-flush\" id=\"jobsAccordion\">\r\n                        {\r\n                            jobs !== [] ?\r\n                                jobs.map((job, index) => \r\n                                    <Job key={index} job={job}/>\r\n                                )\r\n                                :\r\n                                <p>No jobs</p>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jobs;","import {useSelector} from \"react-redux\";\r\nimport Login from \"../components/Login\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport OnboardingSlides from \"../components/OnboardingSlides\";\r\nimport Jobs from \"../components/Jobs\";\r\nimport {LOGIN_STATE} from \"../redux/storeConstants\";\r\n\r\n\r\nfunction App() {\r\n    const loginState = useSelector(state => state.loginState);\r\n    const user = useSelector(state => state.user);\r\n\r\n    return (\r\n        <div className=\"App canvas\">\r\n            {\r\n                loginState !== LOGIN_STATE.LOGGED_IN ?\r\n                    <Login />\r\n                    :\r\n                    <>\r\n                        <Navbar />\r\n                        {\r\n                            !user.onboarding.intro ?\r\n                                <OnboardingSlides />\r\n                                :\r\n                                <>\r\n\r\n                                    <Jobs />\r\n                                </>\r\n                                \r\n                        }\r\n                    </>\r\n            }\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport bootstrap from 'bootstrap';\r\n\r\nimport store from \"./redux/store\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './view/App';\r\nimport './styles/styles.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}